[{"C:\\Users\\Usuario\\OneDrive\\Desktop\\CodeOp\\WhenShouldIWalk\\client\\src\\index.js":"1","C:\\Users\\Usuario\\OneDrive\\Desktop\\CodeOp\\WhenShouldIWalk\\client\\src\\App.js":"2","C:\\Users\\Usuario\\OneDrive\\Desktop\\CodeOp\\WhenShouldIWalk\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Usuario\\OneDrive\\Desktop\\CodeOp\\WhenShouldIWalk\\client\\src\\Components\\Header.js":"4","C:\\Users\\Usuario\\OneDrive\\Desktop\\CodeOp\\WhenShouldIWalk\\client\\src\\Components\\WalkForm.js":"5","C:\\Users\\Usuario\\OneDrive\\Desktop\\CodeOp\\WhenShouldIWalk\\client\\src\\Components\\WalkList.js":"6","C:\\Users\\Usuario\\OneDrive\\Desktop\\CodeOp\\WhenShouldIWalk\\client\\src\\Components\\CityForm.js":"7","C:\\Users\\Usuario\\OneDrive\\Desktop\\CodeOp\\WhenShouldIWalk\\client\\src\\Components\\Response.js":"8","C:\\Users\\Usuario\\OneDrive\\Desktop\\CodeOp\\WhenShouldIWalk\\client\\src\\Components\\ResponseRainy.js":"9","C:\\Users\\Usuario\\OneDrive\\Desktop\\CodeOp\\WhenShouldIWalk\\client\\src\\Components\\ResponseNight.js":"10"},{"size":425,"mtime":1614278052312,"results":"11","hashOfConfig":"12"},{"size":5791,"mtime":1614542320790,"results":"13","hashOfConfig":"12"},{"size":375,"mtime":1614278052313,"results":"14","hashOfConfig":"12"},{"size":838,"mtime":1614278052138,"results":"15","hashOfConfig":"12"},{"size":1610,"mtime":1614278052140,"results":"16","hashOfConfig":"12"},{"size":982,"mtime":1614278052140,"results":"17","hashOfConfig":"12"},{"size":1045,"mtime":1614278052137,"results":"18","hashOfConfig":"12"},{"size":7793,"mtime":1614278052139,"results":"19","hashOfConfig":"12"},{"size":7977,"mtime":1614532820851,"results":"20","hashOfConfig":"12"},{"size":8317,"mtime":1614547255835,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1lq06f6",{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":1,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Usuario\\OneDrive\\Desktop\\CodeOp\\WhenShouldIWalk\\client\\src\\index.js",[],["47","48"],"C:\\Users\\Usuario\\OneDrive\\Desktop\\CodeOp\\WhenShouldIWalk\\client\\src\\App.js",["49","50"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./Components/Header.js\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport WalkForm from \"./Components/WalkForm.js\";\r\nimport WalkList from \"./Components/WalkList.js\";\r\nimport CityForm from \"./Components/CityForm.js\";\r\nimport Response from \"./Components/Response.js\";\r\nimport ResponseRainy from \"./Components/ResponseRainy.js\";\r\nimport ResponseNight from \"./Components/ResponseNight.js\";\r\n\r\n//Gets the baseurl and apikey from the process env\r\nconst BASEURL = \"http://api.weatherapi.com/v1\";\r\nconst API_KEY = \"05d2e662aca243ef99c223826210402\";\r\n\r\nfunction App() {\r\n  let [error, setError] = useState(null);\r\n  let [forecast, setForecast] = useState(null);\r\n  let [walks, setWalks] = useState([]);\r\n\r\n  //calls the getWalks function as an effect of opening the app\r\n  useEffect(() => {\r\n    getWalks();\r\n  }, []);\r\n\r\n  //function to get the walks from the database\r\n  const getWalks = () => {\r\n    fetch(\"/walks\")\r\n      .then(result => result.json())\r\n      .then(walks => {\r\n        setWalks(walks);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  //Deletes walks from the database\r\n  function deleteWalk(id) {\r\n    console.log(\"Delete walk console log\" + id);\r\n    let options = {\r\n      method: \"DELETE\"\r\n      // body: JSON.stringify(walks)\r\n    };\r\n\r\n    fetch(`/walks/${id}`, options)\r\n      .then(result => result.json())\r\n      .then(walks => {\r\n        setWalks(walks);\r\n      })\r\n      .catch(err => {\r\n        console.log(\"error!\", err.message);\r\n      });\r\n  }\r\n\r\n  //Adds a walk to the database\r\n  function addWalk(title, date, time) {\r\n    let newWalk = { title, date, time };\r\n    let options = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      //this tells the server in what format to expect the data\r\n      body: JSON.stringify(newWalk) //object needs to converted to json (with stringify)\r\n    };\r\n    fetch(\"/walks\", options)\r\n      .then(result => result.json())\r\n      .then(walks => {\r\n        setWalks(walks);\r\n      })\r\n      .catch(err => {\r\n        console.log(\"error!\", err.message);\r\n      });\r\n  }\r\n\r\n  //gets the weather from the API\r\n  const getWeather = async location => {\r\n    console.log(\"location -->\", location);\r\n    let url = `${BASEURL}/forecast.json?key=${API_KEY}&q=${location}&days=1`;\r\n    // sets the url for the query\r\n    setForecast(null);\r\n    //resets to null\r\n\r\n    try {\r\n      console.log(url);\r\n      let response = await fetch(url);\r\n\r\n      // call fetch, wait for return\r\n      if (response.ok) {\r\n        console.log(\"Response ok\");\r\n        // server received and understood the request\r\n        let data = await response.json();\r\n        setForecast(data); //update state\r\n      } else {\r\n        console.log(\"Run into an error\");\r\n        setError(`Server error: ${response.status} ${response.statusText}`);\r\n      }\r\n    } catch (err) {\r\n      console.log(\"Ended up in catch\");\r\n      setError(`Network error: ${err.message}`);\r\n    }\r\n  };\r\n\r\n\r\n  //Get 2 days of weather for nightmode\r\n  const getWeather2 = async location => {\r\n    console.log(\"location -->\", location);\r\n    let url = `${BASEURL}/forecast.json?key=${API_KEY}&q=${location}&days=2`;\r\n    // sets the url for the query\r\n    setForecast(null);\r\n    //resets to null\r\n\r\n    try {\r\n      console.log(url);\r\n      let response = await fetch(url);\r\n\r\n      // call fetch, wait for return\r\n      if (response.ok) {\r\n        console.log(\"Response ok\");\r\n        // server received and understood the request\r\n        let data = await response.json();\r\n        setForecast(data); //update state\r\n      } else {\r\n        console.log(\"Run into an error\");\r\n        setError(`Server error: ${response.status} ${response.statusText}`);\r\n      }\r\n    } catch (err) {\r\n      console.log(\"Ended up in catch\");\r\n      setError(`Network error: ${err.message}`);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n\r\n      <br></br>\r\n\r\n      <div class=\"dropdown show\">\r\n        <a class=\"btn btn-secondary dropdown-toggle\" \r\n          href=\"#\" \r\n          role=\"button\" \r\n          id=\"dropdownMenuLink\" \r\n          data-toggle=\"dropdown\" \r\n          aria-haspopup=\"true\" \r\n          aria-expanded=\"false\"\r\n          >\r\n          Choose your mood\r\n        </a>\r\n\r\n        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuLink\">\r\n          <a class=\"dropdown-item\" href=\"/rainy\">Rainy mood</a>\r\n          <a class=\"dropdown-item\" href=\"/night\">Night mode</a>\r\n          <a class=\"dropdown-item\" href=\"/\">Sunny walk</a>\r\n        </div>\r\n      </div>\r\n\r\n\r\n\r\n      <Switch>\r\n\r\n        {/*Sunny path - deafult*/}\r\n        {/* Using 'exact' else route will match everything */}\r\n        <Route path=\"/\" exact>\r\n          <CityForm onSubmit={location => getWeather(location)} />\r\n          {forecast && <Response forecast={forecast} />}\r\n          <br></br>\r\n        </Route>\r\n\r\n\r\n        {/*Rainy path*/}\r\n        <Route path=\"/rainy\" exact>\r\n          <CityForm onSubmit={location => getWeather(location)} />\r\n          {forecast && <ResponseRainy forecast={forecast} />}\r\n          <br></br>\r\n        </Route>\r\n\r\n\r\n        {/*Night path*/}\r\n        <Route path=\"/night\" exact>\r\n          <CityForm onSubmit={location => getWeather2(location)} />\r\n          {forecast && <ResponseNight forecast={forecast} />}\r\n          <br></br>\r\n        </Route>\r\n\r\n\r\n        {/*My Walks path*/}\r\n        <Route path=\"/mywalks\">\r\n          <WalkForm\r\n            onSubmit={(title, date, time) => addWalk(title, date, time)}\r\n          />\r\n          <WalkList walks={walks} onDelete={id => deleteWalk(id)} />\r\n        </Route>\r\n\r\n      </Switch>\r\n    </div>\r\n  ); \r\n}\r\nexport default App;\r\n","C:\\Users\\Usuario\\OneDrive\\Desktop\\CodeOp\\WhenShouldIWalk\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Usuario\\OneDrive\\Desktop\\CodeOp\\WhenShouldIWalk\\client\\src\\Components\\Header.js",[],"C:\\Users\\Usuario\\OneDrive\\Desktop\\CodeOp\\WhenShouldIWalk\\client\\src\\Components\\WalkForm.js",["51"],"import React, { useState } from \"react\";\r\n\r\n//Defines the use states for the walk form\r\nfunction WalkForm(props) {\r\n  const [date, setDate] = useState(\"\");\r\n  const [time, setTime] = useState(\"\");\r\n  const [title, setTitle] = useState(\"\");\r\n\r\n  //Function to change the date, time and title when the form field change\r\n  function handleChange(event) {\r\n    let { name, value } = event.target;\r\n\r\n    switch (name) {\r\n      case \"date\":\r\n        setDate(value);\r\n        break;\r\n      case \"time\":\r\n        setTime(value);\r\n        break;\r\n      case \"title\":\r\n        setTitle(value);\r\n        break;\r\n    }\r\n  }\r\n\r\n  //Function to add the title, date and time to the table on submit\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    props.onSubmit(title, date, time);\r\n    setDate(\"\");\r\n    setTime(\"\");\r\n    setTitle(\"\");\r\n  }\r\n\r\n  return (\r\n    //Walk form\r\n    <div className=\"WalkForm\">\r\n      <h2 id=\"EnterWalk\"> Enter a walk</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          Title&nbsp;\r\n          <input\r\n            id=\"title\"\r\n            type=\"textarea\"\r\n            name=\"title\"\r\n            value={title}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n\r\n        <label>\r\n          Date&nbsp;\r\n          <input type=\"date\" name=\"date\" value={date} onChange={handleChange} />\r\n        </label>\r\n\r\n        <label>\r\n          Time&nbsp;\r\n          <input type=\"time\" name=\"time\" value={time} onChange={handleChange} />\r\n        </label>\r\n\r\n        <button>Add walk</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WalkForm;\r\n","C:\\Users\\Usuario\\OneDrive\\Desktop\\CodeOp\\WhenShouldIWalk\\client\\src\\Components\\WalkList.js",[],"C:\\Users\\Usuario\\OneDrive\\Desktop\\CodeOp\\WhenShouldIWalk\\client\\src\\Components\\CityForm.js",[],"C:\\Users\\Usuario\\OneDrive\\Desktop\\CodeOp\\WhenShouldIWalk\\client\\src\\Components\\Response.js",["52","53","54"],"import React from \"react\";\r\n\r\nfunction Response(props) {\r\n  let w = props.forecast;\r\n\r\n  // *** INITIAL FETCH FOR AN ARRAY OF HOURS\r\n  let unfilteredHours = Object.entries(w.forecast.forecastday[0].hour); // first fetch of all hours\r\n\r\n  //**FINDS DAYLIGHT HOURS */\r\n  let sunsetHour =\r\n    Number(w.forecast.forecastday[0].astro.sunset.slice(0, 2)) + 12; // finds and converts sunset\r\n  let sunriseHour = Number(w.forecast.forecastday[0].astro.sunrise.slice(0, 2)); //finds and converts sunset hours\r\n\r\n  // **FINDS START TIME ***\r\n  let startTime = null;\r\n  let optimumTime = \"\"; // optimum time needs to be defined as early as here because of the base case\r\n  let timeOfAccess = Number(w.location.localtime.slice(11, -3)); //Time the person accessed the website\r\n  timeOfAccess < sunriseHour\r\n    ? (startTime = sunriseHour)\r\n    : (startTime = timeOfAccess); // if time of access if before sunrise, start time is sunrise hour.\r\n  if (timeOfAccess > sunsetHour) optimumTime = \"Tomorrow\"; // if time of access is after sunset, optimal time is tomorrow\r\n  let sunnyHours = []; //these are the sunny hours in a day\r\n  for (let i = 0; i < unfilteredHours.length; i++) {\r\n    if (i > startTime && i < sunsetHour) sunnyHours.push(unfilteredHours[i]);\r\n  }\r\n\r\n  /***FINDS DRY HOURS***/\r\n  //pushes the sunny hours to either a dryHours or rainyDayHours array\r\n  let dryHours = []; //these are dry hours in a day\r\n  let rainyDayHours = []; //hours to use on a rainy day (all)\r\n  for (let i = 0; i < sunnyHours.length; i++) {\r\n    for (let j = 0; j < sunnyHours[i].length; j++) {\r\n      if (sunnyHours[i][j].will_it_rain === 0) {\r\n        dryHours.push(sunnyHours[i]);\r\n      }\r\n    }\r\n  }\r\n  // *** IF NO DRY HOURS, ALL HOURS ARE \"ELIGIBLE\" HOURS***//\r\n  if (dryHours.length === 0) rainyDayHours = sunnyHours;\r\n\r\n  //**** SORTS HOURS INTO TEMERATURE TYPE *** //\r\n  let comfortableTemp = [];\r\n  let coldTemp = [];\r\n  let rainyCold = [];\r\n  let rainyHot = [];\r\n  let rainyComfortable = [];\r\n  let veryHot = [];\r\n\r\n  if (rainyDayHours.length === 0) {\r\n    //if not going to rain all day\r\n    for (let i = 0; i < dryHours.length; i++) {\r\n      // loop through dry hours array to find right hour\r\n      for (let j = 0; j < dryHours[i].length; j++) {\r\n        if ((dryHours[i][j].temp_c > 10) & (dryHours[i][j].temp_c <= 20)) {\r\n          comfortableTemp.push(dryHours[i]); // if temp between 10 and 20, push to comfortable array\r\n        } else if (dryHours[i][j].temp_c < 10) {\r\n          coldTemp.push(dryHours[i]); // if temp less than 10, push to coldtemp array\r\n        } else if (dryHours[i][j].temp_c > 20) {\r\n          veryHot.push(dryHours[i]); // if temp more than 20, push to veryhot array\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    //if whole day is rainy\r\n    for (let i = 0; i < rainyDayHours.length; i++) {\r\n      for (let j = 0; j < rainyDayHours[i].length; j++) {\r\n        if (\r\n          (rainyDayHours[i][j].temp_c > 10) &\r\n          (rainyDayHours[i][j].temp_c <= 20)\r\n        ) {\r\n          rainyComfortable.push(rainyDayHours[i]); //push temps between 10 and 20 to rainycomfortable\r\n        } else if (rainyDayHours[i][j].temp_c <= 10) {\r\n          rainyCold.push(rainyDayHours[i]); // push temps <= 10 to rainycold\r\n        } else if (rainyDayHours[i][j].temp_c > 20) {\r\n          rainyHot.push(rainyDayHours[i]); // push temps > 20 to rainyhot\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /***SORT TEMP ARRAYS BY A CONDITION ***/\r\n\r\n  let sortTemps = (oldArray, value, direction) => {\r\n    let newArray = oldArray.sort(function(a, b) {\r\n      switch (value) {\r\n        case \"wind_mph\":\r\n          if (direction === \"low-high\") {\r\n            return a[1].wind_mph - b[1].wind_mph;\r\n          } else return b[1].wind_mph - a[1].wind_mph;\r\n        case \"temp_c\":\r\n          if (direction === \"low-high\") {\r\n            return a[1].temp_c - b[1].temp_c;\r\n          } else return b[1].temp_c - a[1].temp_c;\r\n        case \"humidity\":\r\n          if (direction === \"low-high\") {\r\n            return a[1].humidity - b[1].humidity;\r\n          } else return b[1].humidity - a[1].humidity;\r\n        case \"totalprecip_mm\":\r\n          if (direction === \"low-high\") {\r\n            return a[1].totalprecip_mm - b[1].totalprecip_mm;\r\n          } else return b[1].totalprecip_mm - a[1].totalprecip_mm;\r\n      }\r\n    });\r\n    return newArray;\r\n  };\r\n  // uses the above function to sort all the temperatures in each array.\r\n  let sortedComfortableTemp = sortTemps(\r\n    comfortableTemp,\r\n    \"humidity\",\r\n    \"low-high\"\r\n  );\r\n  let sortedVeryHot = sortTemps(veryHot, \"wind_mph\", \"high-low\");\r\n  let sortedCold = sortTemps(coldTemp, \"wind_mph\", \"low-high\");\r\n  let sortedRainyCold = sortTemps(rainyCold, \"totalprecip_mm\", \"low-high\");\r\n  let sortedRainyHot = sortTemps(rainyHot, \"temp_c\", \"low-high\");\r\n  let sortedRainyComfortable = sortTemps(\r\n    rainyComfortable,\r\n    \"totalprecip_mm\",\r\n    \"low-high\"\r\n  );\r\n\r\n  // ** FINDS OPTIMUM TIME ** //\r\n  let weatherConditionsAtTime = \"\"; // weather conditions at time of walk\r\n  let icon = \"\";\r\n  //functino to find the optimum time\r\n  let findTime = arrayToCheck => {\r\n    if (Number(arrayToCheck[0][0]) > 12) {\r\n      optimumTime = Number(arrayToCheck[0][0] - 12) + \".00 p.m.\";\r\n    } else if (Number(arrayToCheck[0][0]) === 12) {\r\n      optimumTime = Number(arrayToCheck[0][0]) + \".00 p.m.\";\r\n    } else {\r\n      optimumTime = Number(arrayToCheck[0][0]) + \".00 a.m.\";\r\n    }\r\n    weatherConditionsAtTime =\r\n      \"Weather at this time:  \" +\r\n      arrayToCheck[0][1].condition.text.toLowerCase(); //sets weather conditions\r\n    icon = arrayToCheck[0][1].condition.icon; //sets icon\r\n  };\r\n\r\n  //uses above function to find the optimum time by going through arrays in the following order:\r\n  if (sortedComfortableTemp.length > 0) {\r\n    findTime(sortedComfortableTemp);\r\n  } else if (sortedCold.length > 0) {\r\n    findTime(sortedCold);\r\n  } else if (sortedVeryHot.length > 0) {\r\n    findTime(sortedVeryHot);\r\n  } else if (sortedRainyComfortable.length > 0) {\r\n    findTime(sortedRainyComfortable);\r\n  } else if (sortedRainyHot.length > 0) {\r\n    findTime(sortedRainyHot);\r\n  } else if (sortedRainyCold.length > 0) {\r\n    findTime(sortedRainyCold);\r\n  } else if (timeOfAccess < sunsetHour) {\r\n    optimumTime = \"Now\"; // if none of the arrays have values, and time of access is before sunset, then\r\n    //the time is in the last hour before sunset. So people will need to get out now.\r\n  } else if (timeOfAccess === sunsetHour) {\r\n    optimumTime = \"Tomorrow\"; // best time is tomorrow if access time is after sunset\r\n  }\r\n  // *** DEFINES A LATE MESSAGE *** //\r\n  let lateMessage = \"\";\r\n  if (optimumTime === \"Tomorrow\") lateMessage += \"It's already dark.\";\r\n  if (optimumTime === \"Now\")\r\n    lateMessage += \"Get out quickly. It'll be dark within the hour.\";\r\n  if (optimumTime !== \"Tomorrow\" || optimumTime === \"Now\") {\r\n    return (\r\n      // This is the final response if a time is shown\r\n      <div className=\"Response\">\r\n        <p>\r\n          <h1 id=\"location\">\r\n            {w.location.name}, {w.location.country}\r\n          </h1>\r\n          The best time for your walk is<br></br>\r\n          <span id=\"time\">{optimumTime} </span>\r\n        </p>\r\n        <p>\r\n          <img id=\"icon\" src={icon} /> <br></br>\r\n          {weatherConditionsAtTime}\r\n        </p>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      // This is the final response if \"tomorrow\" is shown\r\n      <div className=\"Response\">\r\n        <p>\r\n          <h1 id=\"location\">\r\n            {w.location.name}, {w.location.country}{\" \"}\r\n          </h1>{\" \"}\r\n          The best time for your walk is<br></br>\r\n          <span id=\"time\">{optimumTime} </span>\r\n          <br></br> {lateMessage}\r\n        </p>\r\n        <p></p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Response;\r\n","C:\\Users\\Usuario\\OneDrive\\Desktop\\CodeOp\\WhenShouldIWalk\\client\\src\\Components\\ResponseRainy.js",["55","56","57"],"import React from \"react\";\r\n\r\nfunction ResponseRainy(props) {\r\n  //On the rainy mood we maintain the light hours conditions.\r\n\r\n  let w = props.forecast;\r\n\r\n  // *** INITIAL FETCH FOR AN ARRAY OF HOURS\r\n  let unfilteredHours = Object.entries(w.forecast.forecastday[0].hour); // first fetch of all hours\r\n\r\n  //**FINDS DAYLIGHT HOURS */\r\n  let sunsetHour =\r\n    Number(w.forecast.forecastday[0].astro.sunset.slice(0, 2)) + 12; // finds and converts sunset\r\n  let sunriseHour = Number(w.forecast.forecastday[0].astro.sunrise.slice(0, 2)); //finds and converts sunset hours\r\n\r\n  // **FINDS START TIME ***\r\n  let startTime = null;\r\n  let optimumTime = \"\"; // optimum time needs to be defined as early as here because of the base case\r\n  let timeOfAccess = Number(w.location.localtime.slice(11, -3)); //Time the person accessed the website\r\n  timeOfAccess < sunriseHour\r\n    ? (startTime = sunriseHour)\r\n    : (startTime = timeOfAccess); // if time of access if before sunrise, start time is sunrise hour.\r\n  if (timeOfAccess > sunsetHour) optimumTime = \"Tomorrow\"; // if time of access is after sunset, optimal time is tomorrow\r\n  let dayLightHours = []; //these are the daylight hours in a day\r\n  for (let i = 0; i < unfilteredHours.length; i++) {\r\n    if (i > startTime && i < sunsetHour) dayLightHours.push(unfilteredHours[i]);\r\n  }\r\n\r\n  /***FINDS RAINY HOURS***/\r\n  //pushes the sunny hours to either a dryHours or rainyHours array\r\n  let dryHours = []; //these are dry hours in a day\r\n  let rainyHours = []; //hours to use on a rainy day (all)\r\n  for (let i = 0; i < dayLightHours.length; i++) {\r\n    for (let j = 0; j < dayLightHours[i].length; j++) {\r\n      //changing from ===0 (dry), to ===1 (rainy)\r\n      if (dayLightHours[i][j].will_it_rain === 1) {\r\n        rainyHours.push(dayLightHours[i]);\r\n      }\r\n    }\r\n  }\r\n  // *** IF NO RAINY HOURS, ALL HOURS ARE \"ELIGIBLE\" HOURS***//\r\n  if (rainyHours.length === 0) dryHours = dayLightHours;\r\n\r\n  //**** SORTS HOURS INTO TEMERATURE TYPE *** //\r\n  let comfortableTemp = [];\r\n  let coldTemp = [];\r\n  let rainyCold = [];\r\n  let rainyHot = [];\r\n  let rainyComfortable = [];\r\n  let veryHot = [];\r\n\r\n  if (rainyHours.length === 0) {\r\n    //if not going to rain all day\r\n    for (let i = 0; i < dryHours.length; i++) {\r\n      // loop through dry hours array to find right hour\r\n      for (let j = 0; j < dryHours[i].length; j++) {\r\n        if ((dryHours[i][j].temp_c > 10) & (dryHours[i][j].temp_c <= 20)) {\r\n          comfortableTemp.push(dryHours[i]); // if temp between 10 and 20, push to comfortable array\r\n        } else if (dryHours[i][j].temp_c < 10) {\r\n          coldTemp.push(dryHours[i]); // if temp less than 10, push to coldtemp array\r\n        } else if (dryHours[i][j].temp_c > 20) {\r\n          veryHot.push(dryHours[i]); // if temp more than 20, push to veryhot array\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    //if whole day is rainy\r\n    for (let i = 0; i < rainyHours.length; i++) {\r\n      for (let j = 0; j < rainyHours[i].length; j++) {\r\n        if (\r\n          //+5º to temp. as we don't have sunlight\r\n          (rainyHours[i][j].temp_c > 15) &\r\n          (rainyHours[i][j].temp_c <= 25)\r\n        ) {\r\n          rainyComfortable.push(rainyHours[i]); //push temps between 15 and 25 to rainycomfortable\r\n        } else if (rainyHours[i][j].temp_c <= 15) {\r\n          rainyCold.push(rainyHours[i]); // push temps <= 15 to rainycold\r\n        } else if (rainyHours[i][j].temp_c > 25) {\r\n          rainyHot.push(rainyHours[i]); // push temps > 25 to rainyhot\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /***SORT TEMP ARRAYS BY A CONDITION ***/\r\n\r\n  let sortTemps = (oldArray, value, direction) => {\r\n    let newArray = oldArray.sort(function(a, b) {\r\n      switch (value) {\r\n        case \"wind_mph\":\r\n          if (direction === \"low-high\") {\r\n            return a[1].wind_mph - b[1].wind_mph;\r\n          } else return b[1].wind_mph - a[1].wind_mph;\r\n        case \"temp_c\":\r\n          if (direction === \"low-high\") {\r\n            return a[1].temp_c - b[1].temp_c;\r\n          } else return b[1].temp_c - a[1].temp_c;\r\n        case \"humidity\":\r\n          if (direction === \"low-high\") {\r\n            return a[1].humidity - b[1].humidity;\r\n          } else return b[1].humidity - a[1].humidity;\r\n        case \"totalprecip_mm\":\r\n          if (direction === \"low-high\") {\r\n            return a[1].totalprecip_mm - b[1].totalprecip_mm;\r\n          } else return b[1].totalprecip_mm - a[1].totalprecip_mm;\r\n      }\r\n    });\r\n    return newArray;\r\n  };\r\n\r\n  // uses the above function to sort all the temperatures in each array.\r\n  let sortedComfortableTemp = sortTemps(\r\n    comfortableTemp,\r\n    \"humidity\",\r\n    \"low-high\"\r\n  );\r\n  let sortedVeryHot = sortTemps(veryHot, \"wind_mph\", \"high-low\");\r\n  let sortedCold = sortTemps(coldTemp, \"wind_mph\", \"low-high\");\r\n  let sortedRainyCold = sortTemps(rainyCold, \"totalprecip_mm\", \"low-high\");\r\n  let sortedRainyHot = sortTemps(rainyHot, \"temp_c\", \"low-high\");\r\n  let sortedRainyComfortable = sortTemps(\r\n    rainyComfortable,\r\n    \"totalprecip_mm\",\r\n    \"low-high\"\r\n  );\r\n\r\n  // ** FINDS OPTIMUM TIME ** //\r\n  let weatherConditionsAtTime = \"\"; // weather conditions at time of walk\r\n  let icon = \"\";\r\n  //function to find the optimum time\r\n  let findTime = arrayToCheck => {\r\n    if (Number(arrayToCheck[0][0]) > 12) {\r\n      optimumTime = Number(arrayToCheck[0][0] - 12) + \".00 p.m.\";\r\n    } else if (Number(arrayToCheck[0][0]) === 12) {\r\n      optimumTime = Number(arrayToCheck[0][0]) + \".00 p.m.\";\r\n    } else {\r\n      optimumTime = Number(arrayToCheck[0][0]) + \".00 a.m.\";\r\n    }\r\n    weatherConditionsAtTime =\r\n      \"Weather at this time:  \" +\r\n      arrayToCheck[0][1].condition.text.toLowerCase(); //sets weather conditions\r\n    icon = arrayToCheck[0][1].condition.icon; //sets icon\r\n  };\r\n\r\n  //uses above function to find the optimum time by going through arrays in the following order:\r\n  if (sortedRainyComfortable.length > 0) {\r\n    findTime(sortedRainyComfortable);\r\n  } else if (sortedRainyHot.length > 0) {\r\n    findTime(sortedRainyHot);\r\n  } else if (sortedRainyCold.length > 0) {\r\n    findTime(sortedRainyCold);\r\n  } else if (sortedComfortableTemp.length > 0) {\r\n    findTime(sortedComfortableTemp);\r\n  } else if (sortedCold.length > 0) {\r\n    findTime(sortedCold);\r\n  } else if (sortedVeryHot.length > 0) {\r\n    findTime(sortedVeryHot);\r\n  } else if (timeOfAccess < sunsetHour) {\r\n    optimumTime = \"Now\"; // if none of the arrays have values, and time of access is before sunset, then\r\n    //the time is in the last hour before sunset. So people will need to get out now.\r\n  } else if (timeOfAccess === sunsetHour) {\r\n    optimumTime = \"Tomorrow\"; // best time is tomorrow if access time is after sunset\r\n  }\r\n  // *** DEFINES A LATE MESSAGE *** //\r\n  let lateMessage = \"\";\r\n  if (optimumTime === \"Tomorrow\") lateMessage += \"It's already dark.\";\r\n  if (optimumTime === \"Now\")\r\n    lateMessage += \"Get out quickly. It'll be dark within the hour.\";\r\n  if (optimumTime !== \"Tomorrow\" || optimumTime === \"Now\") {\r\n    return (\r\n      // This is the final response if a time is shown\r\n      <div className=\"Response\">\r\n        <p>\r\n          <h1 id=\"location\">\r\n            {w.location.name}, {w.location.country}\r\n          </h1>\r\n          The best time for your rainy walk is<br></br>\r\n          <span id=\"time\">{optimumTime} </span>\r\n        </p>\r\n        <p>\r\n          <img id=\"icon\" src={icon} /> <br></br>\r\n          {weatherConditionsAtTime}\r\n        </p>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      // This is the final response if \"tomorrow\" is shown\r\n      <div className=\"Response\">\r\n        <p>\r\n          <h1 id=\"location\">\r\n            {w.location.name}, {w.location.country}{\" \"}\r\n          </h1>{\" \"}\r\n          The best time for your rainy walk is<br></br>\r\n          <span id=\"time\">{optimumTime} </span>\r\n          <br></br> {lateMessage}\r\n        </p>\r\n        <p></p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ResponseRainy;\r\n","C:\\Users\\Usuario\\OneDrive\\Desktop\\CodeOp\\WhenShouldIWalk\\client\\src\\Components\\ResponseNight.js",["58","59","60","61","62"],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":17,"column":8,"nodeType":"69","messageId":"70","endLine":17,"endColumn":13},{"ruleId":"71","severity":1,"message":"72","line":140,"column":9,"nodeType":"73","endLine":147,"endColumn":12},{"ruleId":"74","severity":1,"message":"75","line":13,"column":5,"nodeType":"76","messageId":"77","endLine":23,"endColumn":6},{"ruleId":"78","severity":1,"message":"79","line":84,"column":34,"nodeType":"80","messageId":"81","endLine":84,"endColumn":42},{"ruleId":"74","severity":1,"message":"75","line":85,"column":7,"nodeType":"76","messageId":"77","endLine":102,"endColumn":8},{"ruleId":"82","severity":1,"message":"83","line":176,"column":11,"nodeType":"73","endLine":176,"endColumn":39},{"ruleId":"78","severity":1,"message":"79","line":88,"column":34,"nodeType":"80","messageId":"81","endLine":88,"endColumn":42},{"ruleId":"74","severity":1,"message":"75","line":89,"column":7,"nodeType":"76","messageId":"77","endLine":106,"endColumn":8},{"ruleId":"82","severity":1,"message":"83","line":181,"column":11,"nodeType":"73","endLine":181,"endColumn":39},{"ruleId":"67","severity":1,"message":"84","line":16,"column":7,"nodeType":"69","messageId":"70","endLine":16,"endColumn":21},{"ruleId":"78","severity":1,"message":"79","line":105,"column":34,"nodeType":"80","messageId":"81","endLine":105,"endColumn":42},{"ruleId":"74","severity":1,"message":"75","line":106,"column":7,"nodeType":"76","messageId":"77","endLine":123,"endColumn":8},{"ruleId":"85","severity":2,"message":"86","line":168,"column":29,"nodeType":"69","messageId":"87","endLine":168,"endColumn":40},{"ruleId":"82","severity":1,"message":"83","line":196,"column":11,"nodeType":"73","endLine":196,"endColumn":39},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","array-callback-return","Array.prototype.sort() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'sunsetHourDay2' is assigned a value but never used.","no-undef","'sunriseHour' is not defined.","undef","no-global-assign","no-unsafe-negation"]