[{"C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\index.js":"1","C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\App.js":"2","C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\reportWebVitals.js":"3","C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\Components\\Header.js":"4","C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\Components\\WalkForm.js":"5","C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\Components\\WalkList.js":"6","C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\Components\\Response.js":"7","C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\Components\\CityForm.js":"8"},{"size":407,"mtime":1613921091206,"results":"9","hashOfConfig":"10"},{"size":3492,"mtime":1614201901026,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1613587962439,"results":"12","hashOfConfig":"10"},{"size":836,"mtime":1614201665200,"results":"13","hashOfConfig":"10"},{"size":1610,"mtime":1614201833536,"results":"14","hashOfConfig":"10"},{"size":1032,"mtime":1614201860623,"results":"15","hashOfConfig":"10"},{"size":7799,"mtime":1614201772428,"results":"16","hashOfConfig":"10"},{"size":1045,"mtime":1614031773657,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"p3gxau",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\index.js",[],["37","38"],"C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\App.js",["39"],"C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\reportWebVitals.js",[],"C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\Components\\Header.js",[],"C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\Components\\WalkForm.js",["40"],"import React, { useState } from \"react\";\r\n\r\n//Defines the use states for the walk form\r\nfunction WalkForm(props) {\r\n  const [date, setDate] = useState(\"\");\r\n  const [time, setTime] = useState(\"\");\r\n  const [title, setTitle] = useState(\"\");\r\n\r\n  //Function to change the date, time and title when the form field change\r\n  function handleChange(event) {\r\n    let { name, value } = event.target;\r\n\r\n    switch (name) {\r\n      case \"date\":\r\n        setDate(value);\r\n        break;\r\n      case \"time\":\r\n        setTime(value);\r\n        break;\r\n      case \"title\":\r\n        setTitle(value);\r\n        break;\r\n    }\r\n  }\r\n\r\n  //Function to add the title, date and time to the table on submit\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    props.onSubmit(title, date, time);\r\n    setDate(\"\");\r\n    setTime(\"\");\r\n    setTitle(\"\");\r\n  }\r\n\r\n  return (\r\n    //Walk form\r\n    <div className=\"WalkForm\">\r\n      <h2 id=\"EnterWalk\"> Enter a walk</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          Title&nbsp;\r\n          <input\r\n            id=\"title\"\r\n            type=\"textarea\"\r\n            name=\"title\"\r\n            value={title}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n\r\n        <label>\r\n          Date&nbsp;\r\n          <input type=\"date\" name=\"date\" value={date} onChange={handleChange} />\r\n        </label>\r\n\r\n        <label>\r\n          Time&nbsp;\r\n          <input type=\"time\" name=\"time\" value={time} onChange={handleChange} />\r\n        </label>\r\n\r\n        <button>Add walk</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WalkForm;\r\n","C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\Components\\WalkList.js",[],"C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\Components\\Response.js",["41","42","43"],"import React from \"react\";\r\n\r\nfunction Response(props) {\r\n  let w = props.forecast;\r\n\r\n  // *** INITIAL FETCH FOR AN ARRAY OF HOURS\r\n  let unfilteredHours = Object.entries(w.forecast.forecastday[0].hour); // first fetch of all hours\r\n\r\n  //**FINDS DAYLIGHT HOURS */\r\n  let sunsetHour =\r\n    Number(w.forecast.forecastday[0].astro.sunset.slice(0, 2)) + 12; // finds and converts sunset\r\n  let sunriseHour = Number(w.forecast.forecastday[0].astro.sunrise.slice(0, 2)); //finds and converts sunset hours\r\n\r\n  // **FINDS START TIME ***\r\n  let startTime = null;\r\n  let optimumTime = \"\"; // optimum time needs to be defined as early as here because of the base case\r\n  let timeOfAccess = Number(w.location.localtime.slice(11, -3)); //Time the person accessed the website\r\n  timeOfAccess < sunriseHour\r\n    ? (startTime = sunriseHour)\r\n    : (startTime = timeOfAccess); // if time of access if before sunrise, start time is sunrise hour.\r\n  if (timeOfAccess > sunsetHour) optimumTime = \"Tomorrow\"; // if time of access is after sunset, optimal time is tomorrow\r\n  let sunnyHours = []; //these are the sunny hours in a day\r\n  for (let i = 0; i < unfilteredHours.length; i++) {\r\n    if (i > startTime && i < sunsetHour) sunnyHours.push(unfilteredHours[i]);\r\n  }\r\n\r\n  /***FINDS DRY HOURS***/\r\n  //pushes the sunny hours to either a dryHours or rainyDayHours array\r\n  let dryHours = []; //these are dry hours in a day\r\n  let rainyDayHours = []; //hours to use on a rainy day (all)\r\n  for (let i = 0; i < sunnyHours.length; i++) {\r\n    for (let j = 0; j < sunnyHours[i].length; j++) {\r\n      if (sunnyHours[i][j].will_it_rain === 0) {\r\n        dryHours.push(sunnyHours[i]);\r\n      }\r\n    }\r\n  }\r\n  // *** IF NO DRY HOURS, ALL HOURS ARE \"ELIGIBLE\" HOURS***//\r\n  if (dryHours.length === 0) rainyDayHours = sunnyHours;\r\n\r\n  //**** SORTS HOURS INTO TEMERATURE TYPE *** //\r\n  let comfortableTemp = [];\r\n  let coldTemp = [];\r\n  let rainyCold = [];\r\n  let rainyHot = [];\r\n  let rainyComfortable = [];\r\n  let veryHot = [];\r\n\r\n  if (rainyDayHours.length === 0) {\r\n    //if not going to rain all day\r\n    for (let i = 0; i < dryHours.length; i++) {\r\n      // loop through dry hours array to find right hour\r\n      for (let j = 0; j < dryHours[i].length; j++) {\r\n        if ((dryHours[i][j].temp_c > 10) & (dryHours[i][j].temp_c <= 20)) {\r\n          comfortableTemp.push(dryHours[i]); // if temp between 10 and 20, push to comfortable array\r\n        } else if (dryHours[i][j].temp_c < 10) {\r\n          coldTemp.push(dryHours[i]); // if temp less than 10, push to coldtemp array\r\n        } else if (dryHours[i][j].temp_c > 20) {\r\n          veryHot.push(dryHours[i]); // if temp more than 20, push to veryhot array\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    //if whole day is rainy\r\n    for (let i = 0; i < rainyDayHours.length; i++) {      \r\n      for (let j = 0; j < rainyDayHours[i].length; j++) {\r\n        if (\r\n          (rainyDayHours[i][j].temp_c > 10) &\r\n          (rainyDayHours[i][j].temp_c <= 20)\r\n        ) {\r\n          rainyComfortable.push(rainyDayHours[i]); //push temps between 10 and 20 to rainycomfortable\r\n        } else if (rainyDayHours[i][j].temp_c <= 10) {\r\n          rainyCold.push(rainyDayHours[i]); // push temps <= 10 to rainycold\r\n        } else if (rainyDayHours[i][j].temp_c > 20) {\r\n          rainyHot.push(rainyDayHours[i]); // push temps > 20 to rainyhot\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /***SORT TEMP ARRAYS BY A CONDITION ***/\r\n\r\n  let sortTemps = (oldArray, value, direction) => {\r\n    let newArray = oldArray.sort(function(a, b) {\r\n      switch (value) {\r\n        case \"wind_mph\":\r\n          if (direction === \"low-high\") {\r\n            return a[1].wind_mph - b[1].wind_mph;\r\n          } else return b[1].wind_mph - a[1].wind_mph;\r\n        case \"temp_c\":\r\n          if (direction === \"low-high\") {\r\n            return a[1].temp_c - b[1].temp_c;\r\n          } else return b[1].temp_c - a[1].temp_c;\r\n        case \"humidity\":\r\n          if (direction === \"low-high\") {\r\n            return a[1].humidity - b[1].humidity;\r\n          } else return b[1].humidity - a[1].humidity;\r\n        case \"totalprecip_mm\":\r\n          if (direction === \"low-high\") {\r\n            return a[1].totalprecip_mm - b[1].totalprecip_mm;\r\n          } else return b[1].totalprecip_mm - a[1].totalprecip_mm;\r\n      }\r\n    });\r\n    return newArray;\r\n  };\r\n  // uses the above function to sort all the temperatures in each array.\r\n  let sortedComfortableTemp = sortTemps(\r\n    comfortableTemp,\r\n    \"humidity\",\r\n    \"low-high\"\r\n  );\r\n  let sortedVeryHot = sortTemps(veryHot, \"wind_mph\", \"high-low\");\r\n  let sortedCold = sortTemps(coldTemp, \"wind_mph\", \"low-high\");\r\n  let sortedRainyCold = sortTemps(rainyCold, \"totalprecip_mm\", \"low-high\");\r\n  let sortedRainyHot = sortTemps(rainyHot, \"temp_c\", \"low-high\");\r\n  let sortedRainyComfortable = sortTemps(\r\n    rainyComfortable,\r\n    \"totalprecip_mm\",\r\n    \"low-high\"\r\n  );\r\n\r\n  // ** FINDS OPTIMUM TIME ** //\r\n  let weatherConditionsAtTime = \"\"; // weather conditions at time of walk\r\n  let icon = \"\";\r\n  //functino to find the optimum time\r\n  let findTime = arrayToCheck => {\r\n    if (Number(arrayToCheck[0][0]) > 12) {\r\n      optimumTime = Number(arrayToCheck[0][0] - 12) + \".00 p.m.\";\r\n    } else if (Number(arrayToCheck[0][0]) === 12) {\r\n      optimumTime = Number(arrayToCheck[0][0]) + \".00 p.m.\";\r\n    } else {\r\n      optimumTime = Number(arrayToCheck[0][0]) + \".00 a.m.\";\r\n    }\r\n    weatherConditionsAtTime =\r\n      \"Weather at this time:  \" +\r\n      arrayToCheck[0][1].condition.text.toLowerCase(); //sets weather conditions\r\n    icon = arrayToCheck[0][1].condition.icon; //sets icon\r\n  };\r\n\r\n  //uses above function to find the optimum time by going through arrays in the following order:\r\n  if (sortedComfortableTemp.length > 0) {\r\n    findTime(sortedComfortableTemp);\r\n  } else if (sortedCold.length > 0) {\r\n    findTime(sortedCold);\r\n  } else if (sortedVeryHot.length > 0) {\r\n    findTime(sortedVeryHot);\r\n  } else if (sortedRainyComfortable.length > 0) {\r\n    findTime(sortedRainyComfortable);\r\n  } else if (sortedRainyHot.length > 0) {\r\n    findTime(sortedRainyHot);\r\n  } else if (sortedRainyCold.length > 0) {\r\n    findTime(sortedRainyCold);\r\n  } else if (timeOfAccess < sunsetHour) {\r\n    optimumTime = \"Now\"; // if none of the arrays have values, and time of access is before sunset, then\r\n    //the time is in the last hour before sunset. So people will need to get out now.\r\n  } else if (timeOfAccess === sunsetHour) {\r\n    optimumTime = \"Tomorrow\"; // best time is tomorrow if access time is after sunset\r\n  }\r\n  // *** DEFINES A LATE MESSAGE *** //\r\n  let lateMessage = \"\";\r\n  if (optimumTime === \"Tomorrow\") lateMessage += \"It's already dark.\";\r\n  if (optimumTime === \"Now\")\r\n    lateMessage += \"Get out quickly. It'll be dark within the hour.\";\r\n  if (optimumTime !== \"Tomorrow\" || optimumTime === \"Now\") {\r\n    return (\r\n      // This is the final response if a time is shown\r\n      <div className=\"Response\">\r\n        <p>\r\n          <h1 id=\"location\">\r\n            {w.location.name}, {w.location.country}\r\n          </h1>\r\n          The best time for your walk is<br></br>\r\n          <span id=\"time\">{optimumTime} </span>\r\n        </p>\r\n        <p>\r\n          <img id=\"icon\" src={icon} /> <br></br>\r\n          {weatherConditionsAtTime}\r\n        </p>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      // This is the final response if \"tomorrow\" is shown\r\n      <div className=\"Response\">\r\n        <p>\r\n          <h1 id=\"location\">\r\n            {w.location.name}, {w.location.country}{\" \"}\r\n          </h1>{\" \"}\r\n          The best time for your walk is<br></br>\r\n          <span id=\"time\">{optimumTime} </span>\r\n          <br></br> {lateMessage}\r\n        </p>\r\n        <p></p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Response;\r\n","C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\Components\\CityForm.js",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":15,"column":8,"nodeType":"50","messageId":"51","endLine":15,"endColumn":13},{"ruleId":"52","severity":1,"message":"53","line":13,"column":5,"nodeType":"54","messageId":"55","endLine":23,"endColumn":6},{"ruleId":"56","severity":1,"message":"57","line":84,"column":34,"nodeType":"58","messageId":"59","endLine":84,"endColumn":42},{"ruleId":"52","severity":1,"message":"53","line":85,"column":7,"nodeType":"54","messageId":"55","endLine":102,"endColumn":8},{"ruleId":"60","severity":1,"message":"61","line":176,"column":11,"nodeType":"62","endLine":176,"endColumn":39},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","array-callback-return","Array.prototype.sort() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]