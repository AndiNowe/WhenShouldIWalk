[{"C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\index.js":"1","C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\App.js":"2","C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\reportWebVitals.js":"3","C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\Components\\Header.js":"4","C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\Components\\WalkForm.js":"5","C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\Components\\WalkList.js":"6","C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\Components\\Form.js":"7","C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\Components\\Response.js":"8"},{"size":618,"mtime":1613689993788,"results":"9","hashOfConfig":"10"},{"size":3259,"mtime":1613689979575,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1613587962439,"results":"12","hashOfConfig":"10"},{"size":434,"mtime":1613689726721,"results":"13","hashOfConfig":"10"},{"size":1648,"mtime":1613688177115,"results":"14","hashOfConfig":"10"},{"size":728,"mtime":1613688205700,"results":"15","hashOfConfig":"10"},{"size":1106,"mtime":1613689862667,"results":"16","hashOfConfig":"10"},{"size":6860,"mtime":1613688430319,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"p3gxau",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"25"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"25"},"C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\index.js",[],"C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\App.js",["38"],"import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Components/Header.js\";\nimport { Route, Switch } from \"react-router-dom\";\nimport WalkForm from \"./Components/WalkForm.js\";\nimport WalkList from \"./Components/WalkList.js\";\nimport Form from \"./Components/Form.js\";\nimport Response from \"./Components/Response.js\";\n\nconst BASEURL = \"http://api.weatherapi.com/v1\";\nconst API_KEY = \"05d2e662aca243ef99c223826210402\";\n\nfunction App() {\n  let [error, setError] = useState(null);\n  let [forecast, setForecast] = useState(null);\n  let [walks, setWalks] = useState([]);\n\n  useEffect(() => {\n    getWalks();\n  }, []);\n\n  const getWalks = () => {\n    fetch(\"/walks\")\n      .then(result => result.json())\n      .then(walks => {\n        setWalks(walks);\n      })\n      //  console.log(response, \"Response!\")\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  console.log(walks, \"This is walks!\");\n\n  function deleteWalk(id) {\n    console.log(\"Delete walk console log\" + id);\n    let options = {\n      method: \"DELETE\",\n      body: JSON.stringify(walks)\n    };\n\n    fetch(`/walks/${id}`, options)\n      .then(result => result.json())\n      .then(walks => {\n        setWalks(walks);\n      })\n      .catch(err => {\n        console.log(\"error!\", err.message);\n      });\n  }\n\n  function addWalk(title, date, time) {\n    let newWalk = { title, date, time };\n    let options = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      //this tells the server in what format to expect the data\n      body: JSON.stringify(newWalk) //object needs to converted to json (with stringify)\n    };\n    fetch(\"/walks\", options)\n      .then(result => result.json())\n      .then(walks => {\n        setWalks(walks);\n      })\n      .catch(err => {\n        console.log(\"error!\", err.message);\n      });\n  }\n\n  const getWeather = async location => {\n    console.log(\"location -->\", location);\n    let url = `${BASEURL}/forecast.json?key=${API_KEY}&q=${location}&days=1`;\n    // sets the url for the query\n    setForecast(null);\n\n    try {\n      console.log(url);\n      let response = await fetch(url);\n\n      // call fetch, wait for return\n      if (response.ok) {\n        console.log(\"Response ok\");\n        // server received and understood the request\n        let data = await response.json();\n        setForecast(data); //update state\n      } else {\n        console.log(\"Run into an error\");\n        setError(`Server error: ${response.status} ${response.statusText}`);\n      }\n    } catch (err) {\n      console.log(\"Ended up in catch\");\n      setError(`Network error: ${err.message}`);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      \n      <Header />\n      <Switch>\n        {/* Using 'exact' else route will match everything */}\n        <Route path=\"/\" exact>\n          <Form onSubmit={location => getWeather(location)} />\n          {forecast && <Response forecast={forecast} />}\n          <br></br>\n        </Route>\n        <Route path=\"/mywalks\">\n          <WalkForm\n            onSubmit={(title, date, time) => addWalk(title, date, time)}\n          />\n          <WalkList walks={walks} onDelete={id => deleteWalk(id)} />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\nexport default App;\n","C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\reportWebVitals.js",[],["39","40"],"C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\Components\\Header.js",[],"C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\Components\\WalkForm.js",["41"],"import React, { useState } from \"react\";\r\n\r\n\r\nfunction WalkForm(props) {\r\n  const [date, setDate] = useState(\"\");\r\n  const [time, setTime] = useState(\"\");\r\n  const [title, setTitle] = useState(\"\");\r\n\r\n  function handleChange(event) {\r\n    let { name, value } = event.target;\r\n\r\n    switch (name) {\r\n      case \"date\":\r\n        setDate(value);\r\n        break;\r\n      case \"time\":\r\n        setTime(value);\r\n        break;\r\n      case \"title\":\r\n        setTitle(value);\r\n        break;\r\n    }\r\n  }\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    // let walk = { date: date, time: time, title: title };\r\n    props.onSubmit(title, date, time);\r\n    setDate(\"\");\r\n    setTime(\"\");\r\n    setTitle(\"\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"WalkForm\">\r\n      <h2 id=\"EnterWalk\"> Enter a walk</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          Title\r\n          <input\r\n            id=\"title\"\r\n            label=\"title\"\r\n            type=\"textarea\"\r\n            name=\"title\"\r\n            value={title}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        \r\n        <label>\r\n          Date\r\n          <input\r\n            label=\"date\"\r\n            type=\"date\"\r\n            name=\"date\"\r\n            value={date}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        \r\n        <label>\r\n          Time\r\n          <input type=\"time\" name=\"time\" value={time} onChange={handleChange} />\r\n        </label>\r\n        \r\n        <button>Add walk</button>\r\n\r\n        {/* display:\r\n                Date at *time */}\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WalkForm;\r\n","C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\Components\\WalkList.js",[],"C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\Components\\Form.js",[],"C:\\Users\\maisi\\Desktop\\Coding projects\\codeop\\WhenShouldIWalk\\client\\src\\Components\\Response.js",["42","43","44","45"],"import React from \"react\";\r\n\r\nfunction Response(props) {\r\n  let w = props.forecast;\r\n\r\n  // *** INITIAL FETCH FOR AN ARRAY OF HOURS\r\n  let unfilteredHours = Object.entries(w.forecast.forecastday[0].hour); // first fetch of all hours\r\n\r\n  //**FINDS DAYLIGHT HOURS */\r\n  let sunsetHour =\r\n    Number(w.forecast.forecastday[0].astro.sunset.slice(0, 2)) + 12; // finds and converts sunset\r\n  let sunriseHour = Number(w.forecast.forecastday[0].astro.sunrise.slice(0, 2));\r\n  let startTime = null;\r\n\r\n  // **FINDS START TIME ***\r\n  let optimumTime = \"\";\r\n  let timeOfAccess = Number(w.location.localtime.slice(11, -3));\r\n  timeOfAccess < sunriseHour\r\n    ? (startTime = sunriseHour)\r\n    : (startTime = timeOfAccess);\r\n  if (timeOfAccess > sunsetHour) optimumTime = \"Tomorrow\";\r\n  console.log(\"optimumTime\", optimumTime);\r\n  let sunnyHours = []; //these are the sunny hours in a day\r\n  for (let i = 0; i < unfilteredHours.length; i++) {\r\n    if (i > startTime && i < sunsetHour) sunnyHours.push(unfilteredHours[i]);\r\n  }\r\n\r\n  /***FINDS DRY HOURS***/\r\n  let dryHours = []; //these are dry hours in a day\r\n  let rainyDayHours = []; //hours to use on a rainy day (all)\r\n  for (let i = 0; i < sunnyHours.length; i++) {\r\n    for (let j = 0; j < sunnyHours[i].length; j++) {\r\n      if (sunnyHours[i][j].will_it_rain === 0) {\r\n        dryHours.push(sunnyHours[i]);\r\n      }\r\n    }\r\n  }\r\n  // *** IF NO DRY HOURS, ALL HOURS ARE \"ELIGIBLE\" HOURS***//\r\n  if (dryHours.length === 0) rainyDayHours = sunnyHours;\r\n\r\n  //**** SORTS HOURS INTO TEMERATURE TYPE *** //\r\n  let comfortableTemp = [];\r\n  let coldTemp = [];\r\n  let rainyCold = [];\r\n  let rainyHot = [];\r\n  let rainyComfortable = [];\r\n  let veryHot = [];\r\n\r\n  if (rainyDayHours.length === 0) {\r\n    //if not going to rain all day\r\n    for (let i = 0; i < dryHours.length; i++) {\r\n      // loop through dry hours array to find right hour\r\n      for (let j = 0; j < dryHours[i].length; j++) {\r\n        if ((dryHours[i][j].temp_c > 10) & (dryHours[i][j].temp_c <= 20)) {\r\n          comfortableTemp.push(dryHours[i]); // if temp between 10 and 20, push to comfortable array\r\n        } else if (dryHours[i][j].temp_c < 10) {\r\n          coldTemp.push(dryHours[i]); // if temp less than 10, push to coldtemp array\r\n        } else if (dryHours[i][j].temp_c > 20) {\r\n          veryHot.push(dryHours[i]); // if temp more than 20, push to veryhot array\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    for (let i = 0; i < rainyDayHours.length; i++) {\r\n      //if whole day is rainy\r\n      for (let j = 0; j < rainyDayHours[i].length; j++) {\r\n        if (\r\n          (rainyDayHours[i][j].temp_c > 10) &\r\n          (rainyDayHours[i][j].temp_c <= 20)\r\n        ) {\r\n          rainyComfortable.push(rainyDayHours[i]); //push temps between 10 and 20 to rainycomfortable\r\n        } else if (rainyDayHours[i][j].temp_c <= 10) {\r\n          rainyCold.push(rainyDayHours[i]); // push temps <= 10 to rainycold\r\n        } else if (rainyDayHours[i][j].temp_c > 20) {\r\n          rainyHot.push(rainyDayHours[i]); // push temps > 20 to rainyhot\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /***SORT TEMP ARRAYS BY A CONDITION ***/\r\n\r\n  let sortTemps = (oldArray, value, direction) => {\r\n    let newArray = oldArray.sort(function(a, b) {\r\n      switch (value) {\r\n        case \"wind_mph\":\r\n          if (direction === \"low-high\") {\r\n            return a[1].wind_mph - b[1].wind_mph;\r\n          } else return b[1].wind_mph - a[1].wind_mph;\r\n        case \"temp_c\":\r\n          if (direction === \"low-high\") {\r\n            return a[1].temp_c - b[1].temp_c;\r\n          } else return b[1].temp_c - a[1].temp_c;\r\n        case \"humidity\":\r\n          if (direction === \"low-high\") {\r\n            return a[1].humidity - b[1].humidity;\r\n          } else return b[1].humidity - a[1].humidity;\r\n        case \"totalprecip_mm\":\r\n          if (direction === \"low-high\") {\r\n            return a[1].totalprecip_mm - b[1].totalprecip_mm;\r\n          } else return b[1].totalprecip_mm - a[1].totalprecip_mm;\r\n      }\r\n    });\r\n    return newArray;\r\n  };\r\n\r\n  let sortedComfortableTemp = sortTemps(\r\n    comfortableTemp,\r\n    \"humidity\",\r\n    \"low-high\"\r\n  );\r\n  let sortedVeryHot = sortTemps(veryHot, \"wind_mph\", \"high-low\");\r\n  let sortedCold = sortTemps(coldTemp, \"wind_mph\", \"low-high\");\r\n  let sortedRainyCold = sortTemps(rainyCold, \"totalprecip_mm\", \"low-high\");\r\n  let sortedRainyHot = sortTemps(rainyHot, \"temp_c\", \"low-high\");\r\n  let sortedRainyComfortable = sortTemps(\r\n    rainyComfortable,\r\n    \"totalprecip_mm\",\r\n    \"low-high\"\r\n  );\r\n  console.log(\r\n    \"Sorted temps\",\r\n    sortedComfortableTemp,\r\n    sortedVeryHot,\r\n    sortedCold,\r\n    sortedRainyCold,\r\n    sortedRainyHot,\r\n    sortedRainyComfortable\r\n  );\r\n\r\n  // ** FINDS OPTIMUM TIME ** //\r\n  let weatherConditionsAtTime = \"\";\r\n  // let icon =\r\n  let icon = \"\"; // weather conditions at time of walk\r\n  let findTime = arrayToCheck => {\r\n    if (Number(arrayToCheck[0][0]) > 12) {\r\n      console.log(\"Results in arraytoCheck[0][0]\", arrayToCheck[0][0]);\r\n      optimumTime = Number(arrayToCheck[0][0] - 12) + \".00 p.m.\";\r\n    } else if (Number(arrayToCheck[0][0]) === 12) {\r\n      optimumTime = Number(arrayToCheck[0][0]) + \".00 p.m.\";\r\n    } else {\r\n      optimumTime = Number(arrayToCheck[0][0]) + \".00 a.m.\";\r\n    }\r\n    weatherConditionsAtTime =\r\n      \"Weather at this time:  \" +\r\n      arrayToCheck[0][1].condition.text.toLowerCase();\r\n    icon = arrayToCheck[0][1].condition.icon;\r\n  };\r\n\r\n  if (sortedComfortableTemp.length > 0) {\r\n    findTime(sortedComfortableTemp);\r\n  } else if (sortedCold.length > 0) {\r\n    findTime(sortedCold);\r\n  } else if (sortedVeryHot.length > 0) {\r\n    findTime(sortedVeryHot);\r\n  } else if (sortedRainyComfortable.length > 0) {\r\n    findTime(sortedRainyComfortable);\r\n  } else if (sortedRainyHot.length > 0) {\r\n    findTime(sortedRainyHot);\r\n  } else if (sortedRainyCold.length > 0) {\r\n    findTime(sortedRainyCold);\r\n  } else if (sortedRainyCold.length === 0) {\r\n    optimumTime = \"Tomorrow\";\r\n  }\r\n  // add code here - if the sortedrainycold is empty &&& it's before sunset - best time to go out is now before it get dark\r\n\r\n  // *** DEFINES A LATE MESSAGE *** //\r\n  let lateMessage = \"\";\r\n  let optimumTimeMessage = \"\";\r\n  if (optimumTime === \"Tomorrow\") lateMessage += \"It's too late for a walk.\";\r\n  if (optimumTime === \"Now\")\r\n    lateMessage += \"Get out quickly. It'll be dark within the hour.\";\r\n\r\n  return (\r\n    <div className=\"Response\">\r\n      <p>\r\n        <h1 id=\"location\">\r\n          {w.location.name}, {w.location.country}{\" \"}\r\n        </h1>{\" \"}\r\n        The best time for your walk is:<br></br>\r\n        <span id=\"time\">{optimumTime} </span>\r\n        <br></br> {lateMessage}\r\n      </p>\r\n      <p>\r\n        {\" \"}\r\n        <img id=\"icon\" src={icon} /> <br></br>\r\n        {weatherConditionsAtTime} \r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Response;\r\n",{"ruleId":"46","severity":1,"message":"47","line":14,"column":8,"nodeType":"48","messageId":"49","endLine":14,"endColumn":13},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":12,"column":5,"nodeType":"56","messageId":"57","endLine":22,"endColumn":6},{"ruleId":"58","severity":1,"message":"59","line":84,"column":34,"nodeType":"60","messageId":"61","endLine":84,"endColumn":42},{"ruleId":"54","severity":1,"message":"55","line":85,"column":7,"nodeType":"56","messageId":"57","endLine":102,"endColumn":8},{"ruleId":"46","severity":1,"message":"62","line":169,"column":7,"nodeType":"48","messageId":"49","endLine":169,"endColumn":25},{"ruleId":"63","severity":1,"message":"64","line":186,"column":9,"nodeType":"65","endLine":186,"endColumn":37},"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["66"],"no-negated-in-lhs",["67"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","array-callback-return","Array.prototype.sort() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","'optimumTimeMessage' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]